name: Publish to GitHub Pages

on:
  push:
    branches: ["main"]

env:
  NODE_AUTH_TOKEN: ${{ secrets.PAGES_DEPLOYMENT }}
  NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
  NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
  NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
  NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
  NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
  NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
  NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
  NEXT_PUBLIC_FIREBASE_ADMIN_TYPE: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_TYPE }}
  NEXT_PUBLIC_FIREBASE_ADMIN_PRIVATE_KEY_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_PRIVATE_KEY_ID }}
  NEXT_PUBLIC_FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_PRIVATE_KEY }}
  NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_EMAIL }}
  NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_ID }}
  NEXT_PUBLIC_FIREBASE_ADMIN_AUTH_URI: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_AUTH_URI }}
  NEXT_PUBLIC_FIREBASE_ADMIN_TOKEN_URI: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_TOKEN_URI }}
  NEXT_PUBLIC_FIREBASE_ADMIN_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_AUTH_PROVIDER_X509_CERT_URL }}
  NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_X509_CERT_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_ADMIN_CLIENT_X509_CERT_URL }}


permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Detect package manager üëª
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node üçâ
        uses: actions/setup-node@v3
        with:
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          node-version: '18'

      - name: Setup Pages üîß
        id: pages
        uses: actions/configure-pages@v1
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache üíæ
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies ü•ë
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js üçÑ
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Static HTML export with Next.js ü•Ø
        run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Upload artifact ‚õ±Ô∏è
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages üöÄ
        id: deployment
        uses: actions/deploy-pages@v1
